// <auto-generated />
using System;
using Game_Unity.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Game_Unity.Migrations
{
    [DbContext(typeof(CropContext))]
    [Migration("20240416122635_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Game_Unity.Models.Crop", b =>
                {
                    b.Property<int>("CropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CropId"));

                    b.Property<int?>("BatchId")
                        .HasColumnType("int");

                    b.Property<int?>("ClimaticConditionID")
                        .HasColumnType("int");

                    b.Property<string>("GreetingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SoilQualityID")
                        .HasColumnType("int");

                    b.Property<string>("StageGrowth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCrop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CropId");

                    b.ToTable("Crops");
                });
#pragma warning restore 612, 618
        }
    }
}
